openapi: 3.0.0
info:
  title: T.A.V.E.R.N. Api
  version: "0.1.0"
paths:
  /users:
    get:
      summary: Get list of users
      operationId: tavern.controllers.users.read_all
      security:
        - jwt: []
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  
    post:
      summary: Add new user
      operationId: tavern.controllers.users.create
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                group:
                  type: integer
          
      responses:
        201:
          description: User created succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        409:
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /users/by-id/{user_id}:
    get:
      summary: Get user by id
      operationId: tavern.controllers.users.read_one_by_id
      security:
        - jwt: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: ID of the user to get
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User with ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

    put:
      summary: Update user with id
      operationId: tavern.controllers.users.update_by_id
      security:
        - jwt: []
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
          description: ID of the user to update
      requestBody:
        description: Data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                group:
                  type: integer
      responses:
        200:
          description: User updates successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/by-username/{username}:
    get:
      summary: Get user by username
      operationId: tavern.controllers.users.read_one_by_username
      security:
        - jwt: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: username of the user to get
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User with username not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

    put:
      summary: Update user with username
      operationId: tavern.controllers.users.update_by_username
      security:
        - jwt: []
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username of the user to update
      requestBody:
        description: Data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                group:
                  type: integer
      responses:
        200:
          description: User updates successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        409:
          description: Group already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'


  /users/auth:
    post:
      summary: Get JWT token for user
      operationId: tavern.controllers.users.authenticate
      requestBody:
        description: Data for authentication
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Authenticated succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        401:
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /permissions:
    get:
      summary: Get list of permissions
      security:
        - jwt: []
      operationId: tavern.controllers.permissions.read_all
      responses:
        200:
          description: Retrieved permissions succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'

  /user-groups:
    get:
      summary: Get list of user groups
      security:
        - jwt: []
      operationId: tavern.controllers.user_groups.read_all
      responses:
        200:
          description: Retrieved groups succcesfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGroup'

    post:
      summary: Create a new group
      security:
        - jwt: []
      operationId: tavern.controllers.user_groups.create
      requestBody:
        description: Data for new group
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                permissions:
                  type: array
                  items:
                    type: integer
      responses:
        201:
          description: Created group successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'

  /user-groups/{group_id}:
    get:
      summary: Get particular user group
      security:
        - jwt: []
      operationId: tavern.controllers.user_groups.read_one
      parameters:
        - in: path
          name: group_id
          schema:
            type: integer
          required: true
          description: Id of the group to get
      responses:
        200:
          description: Got user group with id successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'

    put:
      summary: Update particular user group
      security:
        - jwt: []
      operationId: tavern.controllers.user_groups.update
      parameters:
        - in: path
          name: group_id
          schema:
            type: integer
          required: true
          description: Id of the group to get
      requestBody:
        description: Data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissions:
                  type: array
                  items: 
                    type: integer
      responses:
        200:
          description: Updated user group with id successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroup'

  /relations:
    get:
      summary: Get all relations
      security:
        - jwt: []
      operationId: tavern.controllers.relations.read_all
      responses:
        200:
          description: Succesfully read all relations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Relation'

    post:
      summary: Create new relation
      security:
        - jwt: []
      operationId: tavern.controllers.relations.create
      requestBody:
        description: Data for the new relation
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                short_name:
                  type: string
                kvk_number:
                  type: string
                address:
                  type: string
                email:
                  type: string
                account:
                  type: string
                has_budget:
                  type: boolean
                budget:
                  type: integer
      responses:
        201:
          description: Relation created succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relation'

  /relations/{relation_id}:
    get:
      summary: Get relation by id
      security:
        - jwt: []
      operationId: tavern.controllers.relations.read_one
      parameters:
        - in: path
          name: relation_id
          required: true
          schema:
            type: integer
          description: Id of the relation to get
      responses:
        200:
          description: Got relation with id successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relation'

    put:
      summary: Update relation by id
      security:
        - jwt: []
      operationId: tavern.controllers.relations.update
      parameters:
        - in: path
          name: relation_id
          required: true
          schema:
            type: integer
          description: Id of the relation to update
      requestBody:
        description: Data for the new relation
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                short_name:
                  type: string
                kvk_number:
                  type: string
                address:
                  type: string
                email:
                  type: string
                account:
                  type: string
                has_budget:
                  type: boolean
                budget:
                  type: integer
      responses:
        200:
          description: Updated relation succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relation'

  /btw-types:
    get:
      summary: Get btw types
      security:
        - jwt: []
      operationId: tavern.controllers.btw_types.read_all
      responses:
        200:
          description: Got btw types successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BtwType'

    post:
      summary: Add new btw type
      security:
        - jwt: []
      operationId: tavern.controllers.btw_types.create
      requestBody:
        description: Data for the new btw type
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                percentage:
                  type: integer
      responses:
        201:
          description: New btw type created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BtwType'

  /btw-types/{btw_id}:
    get:
      summary: Get btw type by id
      security:
        - jwt: []
      operationId: tavern.controllers.btw_types.read_one
      parameters:
        - in: path
          name: btw_id
          required: true
          schema:
            type: integer
          description: Id of the btw type to get
      responses:
        200:
          description: Got btw type successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BtwType'

    put:
      summary: Update btw type by id
      security:
        - jwt: []
      operationId: tavern.controllers.btw_types.update
      parameters:
        - in: path
          name: btw_id
          required: true
          schema:
            type: integer
          description: Id of the btw type to update
      requestBody:
        description: Data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                percentage:
                  type: integer
      responses:
        200:
          description: Got btw type successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BtwType'

  /products:
    get:
      summary: Get list of all products
      security:
        - jwt: []
      operationId: tavern.controllers.products.read_all
      responses:
        200:
          description: Got products successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      summary: Create new product
      security:
        - jwt: []
      operationId: tavern.controllers.products.create
      requestBody:
        description: Data for the new product
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                tag:
                  type: string
                price:
                  type: integer
                btw_id:
                  type: integer
                group_id:
                  type: integer
      responses:
        201:
          description: New product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /products/{product_id}:
    get:
      summary: Get product by id
      security:
        - jwt: []
      operationId: tavern.controllers.products.read_one
      parameters:
        - in: path
          name: product_id
          required: true
          schema:
            type: integer
          description: Id of the product to get
      responses:
        200:
          description: Got product successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      summary: Update product by id
      security:
        - jwt: []
      operationId: tavern.controllers.products.update
      parameters:
        - in: path
          name: product_id
          required: true
          schema:
            type: integer
          description: Id of the product to update
      requestBody:
        description: Data to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                tag:
                  type: string
                group_id:
                  type: integer
      responses:
        200:
          description: Updated product successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

  /groups:
    get:
      summary: Get list of product groups
      security:
        - jwt: []
      operationId: tavern.controllers.groups.read_all
      responses:
        200:
          description: Got products successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'

    post:
      summary: Create new product group
      security:
        - jwt: []
      operationId: tavern.controllers.groups.create
      requestBody:
        required: true
        description: Data for the new group
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        201:
          description: Created product successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  
  /groups/{group_id}:
    get:
      summary: Get product groups by id
      security:
        - jwt: []
      operationId: tavern.controllers.groups.read_one
      parameters:
        - in: path
          name: group_id
          required: true
          schema:
            type: integer
          description: Id of the product group to get
      responses:
        200:
          description: Got product successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'

    put:
      summary: Update product groups by id
      security:
        - jwt: []
      operationId: tavern.controllers.groups.update
      parameters:
        - in: path
          name: group_id
          required: true
          schema:
            type: integer
          description: Id of the product group to get
      requestBody:
        required: true
        description: Data for the updated group
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: Updated product successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'

components:
  schemas:
    ErrorMessage:
      type: object
      properties:
        msg:
          type: string
    Token:
      type: object
      properties:
        token:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        date_created:
          type: string
        date_updated:
          type: string
    UserGroup:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Permission"
        date_created:
          type: string
        date_updated:
          type: string
    Permission:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        date_created:
          type: string
        date_updated:
          type: string
    Relation:
      type: object
      properties:
        id:
          type: integer
        date_created:
          type: string
        date_updated:
          type: string
        name:
          type: string
        short_name:
          type: string
        kvk_number:
          type: string
        address:
          type: string
        email:
          type: string
        account:
          type: string
        has_budget:
          type: boolean
        budget:
          type: integer
    BtwType:
      type: object
      properties:
        id:
          type: integer
        date_created:
          type: string
        date_updated:
          type: string
        name:
          type: string
        percentage:
          type: integer
    SalesPrice:
      type: object
      properties:
        id:
          type: integer
        date_created:
          type: string
        date_updated:
          type: string
        price:
          type: integer
        btw:
          $ref: '#/components/schemas/BtwType'
    ProductPosition:
      type: object
      properties:
        id:
          type: integer
        date_created:
          type: string
        date_updated:
          type: string
        amount:
          type: integer
        value:
          type: integer
    Product:
      type: object
      properties:
        id:
          type: integer
        date_created:
          type: string
        date_updated:
          type: string
        name:
          type: string
        tag:
          type: string
        current_price:
          $ref: '#/components/schemas/SalesPrice'
        current_position:
          $ref: '#/components/schemas/ProductPosition'
    Group:
      type: object
      properties:
        id:
          type: integer
        date_created:
          type: string
        date_updated:
          type: string
        name:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'

  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: tavern.security.decode_token